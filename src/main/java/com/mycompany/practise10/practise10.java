package com.mycompany.practise10;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingWorker;

/**
 *
 * @author Fabián y José María
 */
public class practise10 extends javax.swing.JFrame {
    
    JFileChooser fc = new JFileChooser();
    List<String> files;
    Task task;
    DefaultListModel model = new DefaultListModel();
    // Key: Nombre fichero - Value: Ruta fichero
    Hashtable<String, String> mapNamePath = new Hashtable<>();
    String destination;
    private int totalSize = 0;
    private int prosed = 0;
    
    public practise10() {
        initComponents();
        
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        
        progressBar.setStringPainted(true);
        multipleInterval.setSelected(true);
        
        filesList.setModel(model);
        
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    }
    
    private class Task extends SwingWorker <Void, Void> {
        
        private ZipOutputStream out;
        private BufferedInputStream origin = null;
        @Override
        protected  Void doInBackground() throws Exception {  
            try{
                // Objeto para referenciar el archivo zip de salida
                if (!destination.endsWith(".zip")) destination += ".zip";
                FileOutputStream dest = new FileOutputStream(destination);
                out = new ZipOutputStream(new BufferedOutputStream(dest));
                // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[4096];

                Iterator i = files.iterator();
                while(i.hasNext()){ 
                    String filename = (String)i.next();
                    FileInputStream fi = new FileInputStream(filename);
                    origin = new BufferedInputStream(fi, 4096);
                    String fileN = filename.substring(filename.lastIndexOf("\\")+1);                
                    ZipEntry entry = new ZipEntry( fileN );
                    out.putNextEntry( entry );
                    // Leemos datos desde el archivo origen y se envían al archivo destino
                    int count;

                    while ((count = origin.read(data, 0, 4096)) != -1){
                        out.write(data, 0, count);                                               
                        prosed += count;
                        Thread.sleep(10);
                        progressBar.setValue((int)(((double)prosed/(double)totalSize)*100));
                    }                                           
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                }
                // Cerramos el archivo zip
                out.close();
            } catch (InterruptedException ex) {
                origin.close();
                out.close();
                progressBar.setValue(0);   
                if (!new File(destination).delete()){
                    JOptionPane.showMessageDialog(null, "Cannot delete file", "Cancel task", JOptionPane.WARNING_MESSAGE);
                }
                return null;
            }
            progressBar.setValue(100);
            JOptionPane.showMessageDialog(null, "Compress file was created in " + destination, "Successfull compression", JOptionPane.PLAIN_MESSAGE);
            return null;
        }
        
        @Override
        public void done() {
            prosed = 0;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new javax.swing.ButtonGroup();
        selectionPane = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        filesList = new javax.swing.JList<>();
        selectAll = new javax.swing.JButton();
        clearSelection = new javax.swing.JButton();
        single = new javax.swing.JToggleButton();
        singleInterval = new javax.swing.JToggleButton();
        multipleInterval = new javax.swing.JToggleButton();
        convert = new javax.swing.JButton();
        selectFiles = new javax.swing.JButton();
        configurationPane = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        cancelZip = new javax.swing.JButton();
        signatureLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zip Compressor");

        selectionPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Selection", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Showcard Gothic", 0, 14))); // NOI18N

        jScrollPane1.setViewportView(filesList);

        selectAll.setText("Select All");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });

        clearSelection.setText("Clear selection");
        clearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSelectionActionPerformed(evt);
            }
        });

        buttonGroup.add(single);
        single.setText("Single");
        single.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleActionPerformed(evt);
            }
        });

        buttonGroup.add(singleInterval);
        singleInterval.setText("Single interval");
        singleInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleIntervalActionPerformed(evt);
            }
        });

        buttonGroup.add(multipleInterval);
        multipleInterval.setText("Multiple interval");
        multipleInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleIntervalActionPerformed(evt);
            }
        });

        convert.setText("Convert to .zip");
        convert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertActionPerformed(evt);
            }
        });

        selectFiles.setText("Open folder");
        selectFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectionPaneLayout = new javax.swing.GroupLayout(selectionPane);
        selectionPane.setLayout(selectionPaneLayout);
        selectionPaneLayout.setHorizontalGroup(
            selectionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(multipleInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(singleInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(single, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(convert, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        selectionPaneLayout.setVerticalGroup(
            selectionPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectionPaneLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(selectFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(convert)
                .addGap(32, 32, 32)
                .addComponent(selectAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(clearSelection)
                .addGap(36, 36, 36)
                .addComponent(single)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(singleInterval)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(multipleInterval)
                .addContainerGap(31, Short.MAX_VALUE))
            .addGroup(selectionPaneLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        configurationPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Progress", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Showcard Gothic", 0, 14))); // NOI18N

        cancelZip.setText("Cancel");
        cancelZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelZipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configurationPaneLayout = new javax.swing.GroupLayout(configurationPane);
        configurationPane.setLayout(configurationPaneLayout);
        configurationPaneLayout.setHorizontalGroup(
            configurationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPaneLayout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(cancelZip)
                .addGap(75, 75, 75))
        );
        configurationPaneLayout.setVerticalGroup(
            configurationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configurationPaneLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(configurationPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelZip))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        signatureLabel.setText("© José María & Fabián");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectionPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 2, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(signatureLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(configurationPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(selectionPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configurationPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signatureLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelZipActionPerformed
        if (!task.cancel(true)){
            JOptionPane.showMessageDialog(this, "Cannot abort operation", "Cancel task", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_cancelZipActionPerformed

    private void selectFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFilesActionPerformed
        int res = fc.showOpenDialog(this);
        if (res == JFileChooser.APPROVE_OPTION){
            File file = fc.getSelectedFile();
            File [] filesPath = file.listFiles();
            model.removeAllElements();
            mapNamePath.clear();
            progressBar.setValue(0);
            totalSize = 0;
            for (File fileP :  filesPath) {
                model.addElement(fileP.getName());
                mapNamePath.put(fileP.getName(), fileP.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_selectFilesActionPerformed

    private void convertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertActionPerformed
        if (filesList.getSelectedIndices().length > 0) {
            int res = fc.showSaveDialog(this);
            if (res == JFileChooser.APPROVE_OPTION){
                progressBar.setValue(0);
                totalSize = 0;
                files = new ArrayList<>();

                for (String s : filesList.getSelectedValuesList()) {
                    files.add(mapNamePath.get(s));
                    totalSize += (int) new File(mapNamePath.get(s)).length();
                }
                destination = fc.getSelectedFile().getAbsolutePath();
                task = new Task();
                task.execute();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please make a selection.", "No tables selected", JOptionPane.ERROR_MESSAGE);
        }
        filesList.clearSelection();
    }//GEN-LAST:event_convertActionPerformed

    private void multipleIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleIntervalActionPerformed
        filesList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_multipleIntervalActionPerformed

    private void singleIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleIntervalActionPerformed
        filesList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_singleIntervalActionPerformed

    private void singleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleActionPerformed
        filesList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }//GEN-LAST:event_singleActionPerformed

    private void clearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSelectionActionPerformed
        filesList.clearSelection();
    }//GEN-LAST:event_clearSelectionActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        if (model.getSize() > 0){
            int [] ind = new int[mapNamePath.size()];
            for (int i = 0; i < mapNamePath.size(); i++) ind[i] = i;
            filesList.setSelectedIndices(ind);
        }else{
            JOptionPane.showMessageDialog(this, "Please open a folder", "No folder selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_selectAllActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    //ConfigurationPaneak;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(practise10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(practise10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(practise10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(practise10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new practise10().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton cancelZip;
    private javax.swing.JButton clearSelection;
    private javax.swing.JPanel configurationPane;
    private javax.swing.JButton convert;
    private javax.swing.JList<String> filesList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton multipleInterval;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton selectAll;
    private javax.swing.JButton selectFiles;
    private javax.swing.JPanel selectionPane;
    private javax.swing.JLabel signatureLabel;
    private javax.swing.JToggleButton single;
    private javax.swing.JToggleButton singleInterval;
    // End of variables declaration//GEN-END:variables
}
